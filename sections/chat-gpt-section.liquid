<style>
    .chat-widget {
        width: 300px;
        height: 400px;
        background-color: #f4f4f4;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
      }
      
      .chat-header {
        height: 50px;
        background-color: #007bff;
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
      }
      
      .chat-body {
        height: 350px;
        display: flex;
        flex-direction: column;
      }
      
      .chat-messages {
        flex: 1;
        padding: 10px;
        overflow-y: scroll;
      }
      
      .chat-input {
        display: flex;
        align-items: center;
        padding: 10px;
      }
      
      .chat-input input {
        flex: 1;
        padding: 10px;
        border-radius: 20px;
        border: none;
        margin-right: 10px;
      }
      
      .chat-input button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 20px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }
      
      .chat-input button:hover {
        background-color: #0062cc;
      }
</style>

<div class="chat-widget">
    <div class="chat-header">
      <h3>Chat with our AI</h3>
    </div>
    <div class="chat-body">
      <div class="chat-messages"></div>
      <div class="chat-input">
        <input type="text" placeholder="Type your message...">
        <button>Send</button>
      </div>
    </div>
  </div>

<script>
    const apiKey = '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';
    const chatWidget = document.querySelector('.chat-widget');
    const chatMessages = chatWidget.querySelector('.chat-messages');
    const chatInput = chatWidget.querySelector('.chat-input input');
    const chatButton = chatWidget.querySelector('.chat-input button');
    
    // Function to add a message to the chat widget
    function addMessage(message, isBot) {
      const messageContainer = document.createElement('div');
      messageContainer.classList.add('message');
      if (isBot) {
        messageContainer.classList.add('bot');
      }
      messageContainer.innerText = message;
      chatMessages.appendChild(messageContainer);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // Function to send a message to GPT and receive a response
    async function sendMessage(message) {
      try {
        addMessage(message, false);
        const response = await fetch('https://api.openai.com/v1/engine/davinci-codex/completions', {
          method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
          },
          body: JSON.stringify({
            prompt: message,
            max_tokens: 100,
            temperature: 0.7
          }),
          mode: 'cors'
        });
        const data = await response.json();
        const botMessage = data.choices[0].text.trim();
        addMessage(botMessage, true);
      } catch (error) {
        console.error('Failed to fetch:', error);
        addMessage('Sorry, something went wrong. Please try again later.', true);
      }
    }
    
    // Event listener for the chat button
    chatButton.addEventListener('click', () => {
      const message = chatInput.value.trim();
      if (message !== '') {
        sendMessage(message);
        chatInput.value = '';
      }
    });
    
    // chat input field
    chatInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
    const message = chatInput.value.trim();
    if (message !== '') {
    sendMessage(message);
    chatInput.value = '';
    }
    }
    });
    
    // Initialize the chat widget
    addMessage('Hello! How can I help you today?', true);
</script>

{% schema %}
  {
    "name": "Chat GPT Section",
    "class": "starter",
    "settings": [    ],
    "presets": [
      {
        "name": "Chat GPT Section",
        "category": "Text"
      }
    ]
  }
{% endschema %}